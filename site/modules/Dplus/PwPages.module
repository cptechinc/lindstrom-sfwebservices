<?php namespace ProcessWire;

/**
 * Class for Building ProcessWire Fields, Templates, Pages
 */
class PwPages extends WireData implements Module {
	const FIELDS = array(
	);

	const TEMPLATES = array(

	);

	const PAGES = array(
		/* Example
		'user-page' => array(
			'code'       => 'user-page',
			'template'   => 'user-page',
			'name'       => 'user',
			'title'      => 'User',
			'summary'    => '',
			'parent'     => '/',
			'parent-new' => '/' NOTE ** Optional **
			'dplus_function' => NOTE ** If Needed by template **
		)
		*/
	);

	const PROCESSWIRE_FIELDS = array(
		'summary',
		'title'
	);

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dplus Create ProcessWire Pages',
			'version' => 101,
			'summary' => 'Dplus Create ProcessWire Pages Base Class',
			'singular' => true,
			'autoload' => true,
		);
	}

	public function init() {

	}

	/**
	 * ProcessWire Installer Function
	 * NOTE: Runs when installed through ProcessWire
	 * @return void
	 */
	public function ___install() {
		$this->install_fields();
		$this->install_templates();
		$this->install_pages();
	}

	/**
	 * ProcessWire removal Function
	 * NOTE: Runs when removed through ProcessWire
	 * @return void
	 */
	public function ___uninstall() {

	}

	public function update() {
		$this->install_fields();
		$this->install_templates();
		$this->install_pages();
	}


/* =============================================================
	Module Functions
============================================================= */
	/**
	 * Installs (updates | creates) the fields
	 * @return void
	 */
	protected function install_fields() {
		foreach ($this::FIELDS as $fieldname => $field) {
			if (boolval($this->wire('fields')->get($field['name']))) {
				$this->update_field($field);
			} else {
				$this->create_field($field);
			}
		}
	}

	/**
	 * Installs (updates | creates) the templates
	 * @return void
	 */
	protected function install_templates() {
		foreach ($this::TEMPLATES as $templatename => $template) {
			if ($this->wire('templates')->get($templatename)) {
				$this->update_template($templatename);
			} else {
				$this->create_template($templatename);
			}
		}
	}

	/**
	 * Installs (updates | creates) the pages
	 * @return void
	 */
	protected function install_pages() {
		foreach ($this::PAGES as $pagename => $page) {
			$pagepath = $page['parent'].$page['name']."/";

			if (boolval($this->wire('pages')->find($pagepath)->count)) {
				$this->update_page($page);
			} else {
				$this->create_page($page);
			}
		}
	}

	/**
	 * Creates Field for Template
	 * NOTE Field is an element from the array created from $this->get_fields()
	 * @param  array  $field array('name' => 'ordernumber', 'type' => 'Text', 'size', => '20', 'column' => 'varchar(20)');
	 * @return bool          Was Field able to be saved?
	 */
	protected function create_field(array $field) {
		$f = new Field(); // create new field object
		return $this->set_fieldproperties($f, $field);
	}

	/**
	 * Updates Field for Template
	 * NOTE Field is an element from the array created from $this->get_fields()
	 * @param  array  $field array('name' => 'ordernumber', 'type' => 'Text', 'size', => '20', 'column' => 'varchar(20)');
	 * @return bool          Was Field able to be saved?
	 */
	protected function update_field(array $field) {
		$f = wire('fields')->get($field['name']);
		return $this->set_fieldproperties($f, $field);
	}

	public function set_fieldproperties(Field $f, array $field) {
		$f->type = ctype_upper($field['type']) ? $field['type'] : ucfirst($field['type']); // get a field type
		$f->name = $field['name'];
		$f->label = $field['label'];

		if (isset($field['notes'])) {
			$f->notes = $field['notes'];
		}
		$function = "update_field_".$field['type'];

		if (method_exists($this, $function)) {
			$this->$function($f, $field);
		}
		return $f->save();
	}

	protected function update_field_select(Field $field, array $fieldproperties) {
		$options = new SelectableOptionArray();
		foreach ($fieldproperties['options'] as $option => $title) {
			$selectoption = new SelectableOption();
			$selectoption->title = $title;
			$selectoption->value = $option;
			$options->add($selectoption);
		}
		$field->type->setOptions($field, $options);
	}

	/**
	 * Creates Field Group for Template
	 * @return bool Was Field Group Saved?
	 */
	protected function create_fieldgroup($template) {
		$pw_fields = new Fieldgroup();
		$pw_fields->name = $template;
		$pw_fields->save();
		return $pw_fields;
	}

	/**
	 * Updates Field Group for Template
	 * @return bool Was Field Group Saved?
	 */
	protected function update_fieldgroup($template) {
		$pw_fields = $this->wire('templates')->get($template)->fieldgroup;

		if (get_class($pw_fields) != 'ProcessWire\Fieldgroup') {
			$pw_fields = $this->create_fieldgroup($template);
		}

		$templatefields = $this::TEMPLATES[$template]['fields'];

		foreach ($templatefields as $fieldname) {
			if (!in_array($fieldname, $this::PROCESSWIRE_FIELDS)) {
				if (array_key_exists($fieldname, $this::FIELDS)) {
					$field = $this::FIELDS[$fieldname];
				} else {
					$field = self::FIELDS[$fieldname];
				}

				if (boolval($this->wire('fields')->get($fieldname)) == false) {
					if ($field) {
						$this->create_field($field);
					}
				} else {
					if (!in_array($fieldname, $this::PROCESSWIRE_FIELDS) && in_array($fieldname, $this::FIELDS)) {
						$this->update_field($field);
					}
				}
			}

			$pw_field = $this->wire('fields')->get($fieldname);
			$pw_fields->add($pw_field);
		}

		foreach ($this::PROCESSWIRE_FIELDS as $fieldname) {
			if ($pw_fields->hasField($fieldname) == false) {
				$pw_field = $this->wire('fields')->get($fieldname);
				$pw_fields->add($pw_field);
			}
		}

		return $pw_fields->save();
	}

	/**
	 * Creates Template
	 * @uses create_fieldgroup()
	 * @return bool Was Template able to be saved?
	 */
	protected function create_template($template) {
		$allow_pagination = array_key_exists('paginated', $this::TEMPLATES[$template]) ? $this::TEMPLATES[$template]['paginated'] : 0;
		$t = new Template();
		$t->name = $template;
		$t->fieldgroup = $this->create_fieldgroup($template);
		$t->save();
		$this->update_fieldgroup($template);
		$t->fieldgroup = $this->wire('fieldgroups')->get($template);
		$this->allowPageNum = $allow_pagination ? 1 : 0;
		$this->slashPageNum = 1;
		$t->save();
	}

	/**
	 * Updates Template
	 * @uses update_fieldgroup()
	 * @return bool Was Template able to be saved?
	 */
	protected function update_template($template) {
		if (array_key_exists('paginated', $this::TEMPLATES[$template])) {
			$allow_pagination = $this::TEMPLATES[$template]['paginated'];
		} else {
			$allow_pagination = 1;
		}

		$t = wire('templates')->get($template);
		$this->update_fieldgroup($template);
		$t->fieldgroup = wire('templates')->get($template)->fieldgroup;
		$t->allowPageNum = $allow_pagination;
		$t->slashPageNum = 1;
		$t->save();
	}

	/**
	 * Updates Existing Page
	 * @param  string $page
	 * @return bool        Was Page updated?
	 */
	protected function update_page($page) {
		$pagepath = $page['parent'].$page['name']."/";
		$parentpath = isset($page['parent-new']) ? $page['parent-new'] : $page['parent'];

		$pw_page = $this->wire('pages')->get($pagepath);
		$pw_page->of(false);
		$pw_page->template = $page['template'];
		$pw_page->parent = $this->wire('pages')->get($parentpath);
		$pw_page->name = $page['name'];
		$pw_page->title = $page['title'];

		$default_templates = self::TEMPLATES;

		if (in_array($page['template'], array_keys($default_templates))) {
			foreach ($default_templates[$page['template']]['fields'] as $fieldname) {
				if (array_key_exists($fieldname, $page)) {
					$pw_page->$fieldname = $page[$fieldname];
				}
			}
		} else {
			foreach ($this::TEMPLATES[$page['template']]['fields'] as $fieldname) {
				if (array_key_exists($fieldname, $page)) {
					$pw_page->$fieldname = $page[$fieldname];
				}
			}
		}
		return $pw_page->save();
	}

	/**
	 * Creates Page
	 * @param  string $page
	 * @return bool         Was Page created?
	 */
	protected function create_page($page) {
		$pw_page = new Page();
		$pw_page->template = $page['template'];
		$pw_page->parent = $this->wire('pages')->get($page['parent']);
		$pw_page->name = $page['name'];
		$pw_page->title = $page['title'];
		$pw_page->save();

		$default_templates = self::TEMPLATES;

		if (in_array($page['template'], array_keys($default_templates))) {
			foreach ($default_templates[$page['template']]['fields'] as $fieldname) {
				$pw_page->$fieldname = $page[$fieldname];
			}
		} else {
			foreach ($this::TEMPLATES[$page['template']]['fields'] as $fieldname) {
				if (array_key_exists($fieldname, $page)) {
					$pw_page->$fieldname = $page[$fieldname];
				}
			}
		}
		return $pw_page->save();
	}
}
