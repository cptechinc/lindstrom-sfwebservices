<?php namespace ProcessWire;

/**
 * class SfWebServicesUserAdmin
 *
 * Handles User Administration
 */
class UserAuthenticator extends WireData implements Module {
	const FIELD_USERNAME = 'IDCLogin';
	const FIELD_PASSWORD = 'IDCPassword';

	public function __construct() {
		$this->authenticated = false;
		$this->username      = '';
		$this->message       = '';
		$this->error         = false;
	}

	/**
	 * [authenticate_input description]
	 * @param  WireInput $input [description]
	 * @return [type]           [description]
	 */
	public function authenticate_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		if (empty($values->text(self::FIELD_USERNAME)) || empty($values->text(self::FIELD_USERNAME))) {
			$this->authenticated = false;
			$this->error         = true;
		} else {
			$this->username = $values->text(self::FIELD_USERNAME);
			$this->authenticated  = $this->authenticate_user($values->text(self::FIELD_USERNAME), $values->text(self::FIELD_PASSWORD));
			$this->error = !$this->authenticated;
		}

		if (!$this->authenticated) {
			$this->message = 'Customer is not authorized';
		}
		return $this->authenticated;
	}

	public function authenticate_user($username, $password) {
		if ($this->wire('users')->find("name=$username")->count()) {
			$user = $this->wire('users')->get("name=$username");

			if ($user->hasRole(SfWebServicesUserAdmin::ROLE_APIAUTHORIZED)) {
				if ($user->id == $this->wire('user')->id) {
					return true;
				} else {
					if ($this->wire('session')->login($username, $password)) {
						return true;
					}
				}
			}
		}
		return false;
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Sf Webservices User Authenticator',
			'version' => 101,
			'summary' => 'Handles User Authentication',
			'singular' => true,
			'autoload' => true
		);
	}
}
