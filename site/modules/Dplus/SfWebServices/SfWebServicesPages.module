<?php namespace ProcessWire;

require_once(__DIR__ . '/../PwPages.module');

/**
 * class Dpages
 *
 * Installs fields, templates, pages necessary for SF webservices
 */
class SfWebServicesPages extends PwPages implements Module {

	const FIELDS = array(
		'apiservice' => array(
			'name'  => 'apiservice',
			'type'  => 'text',
			'label' => 'API Service',
			'description' => 'API Service Endpoint',
			'notes'       => ''
		),
		'pw_template' => array(
			'name'  => 'pw_template',
			'type'  => 'text',
			'label' => 'ProcessWire Template',
			'description' => '',
			'notes'       => ''
		),
	);

	const TEMPLATES = array(
		'api' => array(
			'name'   => 'api',
			'fields' => array()
		),
		'service-tester' => array(
			'name'   => 'service-tester',
			'fields' => array()
		),
		'service-tester-menu' => array(
			'name'   => 'service-tester-menu',
			'fields' => array()
		),
		'service' => array(
			'name'   => 'service',
			'fields' => array()
		),
		'user-admin' => array(
			'name'   => 'user-admin',
			'fields' => array()
		),
		'login' => array(
			'name'   => 'login',
			'fields' => array()
		),
		'portal-menu' => array(
			'name'   => 'portal-menu',
			'fields' => array()
		),
		'portal-function' => array(
			'name'   => 'portal-function',
			'fields' => array('title', 'summary', 'apiservice', 'pw_template')
		),
		'portal-user' => array(
			'name'   => 'portal-user',
			'fields' => array('title')
		),
		'portal-pricing' => array(
			'name'   => 'pricing',
			'fields' => array()
		)
	);

	const PAGES = array(
		'user-admin' => array(
			'template' => 'user-admin',
			'name'     => 'users',
			'title'    => 'User Administration',
			'summary'  => 'Edit / View Users',
			'parent'   => '/'
		),
		'login' => array(
			'template' => 'login',
			'name'     => 'login',
			'title'    => 'Login',
			'summary'  => 'Login / Logout',
			'parent'   => '/'
		),
		'api' => array(
			'template' => 'api',
			'name'     => 'api',
			'title'    => 'Services',
			'summary'  => 'Web Services Menu',
			'parent'   => '/'
		),
		'createquote' => array(
			'template' => 'service',
			'name'     => 'createquote',
			'title'    => 'Create Quote',
			'summary'  => 'Create Quote',
			'parent'   => '/api/'
		),
		'createorderheader' => array(
			'template' => 'service',
			'name'     => 'createorderheader',
			'title'    => 'Create Order Header',
			'summary'  => 'Create Order Header',
			'parent'   => '/api/'
		),
		'createorderdetail' => array(
			'template' => 'service',
			'name'     => 'createorderdetail',
			'title'    => 'Create Order Detail',
			'summary'  => 'Create Order Detail',
			'parent'   => '/api/'
		),
		'createorderend' => array(
			'template' => 'service',
			'name'     => 'createorderend',
			'title'    => 'Create Order End',
			'summary'  => 'Create Order End',
			'parent'   => '/api/'
		),
		'tests' => array(
			'template' => 'api',
			'name'     => 'tests',
			'title'    => 'Test Web Services',
			'summary'  => '',
			'parent'   => '/'
		),
		'test-createquote' => array(
			'template' => 'service-tester',
			'name'     => 'createquote',
			'title'    => 'Create Quote',
			'summary'  => 'Create Quote',
			'parent'   => '/tests/'
		),
		'test-createorderheader' => array(
			'template' => 'service-tester',
			'name'     => 'createorderheader',
			'title'    => 'Create Order Header',
			'summary'  => 'Create Order Header',
			'parent'   => '/tests/'
		),
		'test-createorderdetail' => array(
			'template' => 'service-tester',
			'name'     => 'createorderdetail',
			'title'    => 'Create Order Detail',
			'summary'  => 'Create Order Detail',
			'parent'   => '/tests/'
		),
		'test-createorderend' => array(
			'template' => 'service-tester',
			'name'     => 'createorderend',
			'title'    => 'Create Order End',
			'summary'  => 'Create Order End',
			'parent'   => '/tests/'
		),
		'portal-menu' => array(
			'template' => 'portal-menu',
			'name'     => 'app',
			'title'    => 'Portal Menu',
			'summary'  => 'Portal Menu',
			'parent'   => '/'
		),
		'portal-menu' => array(
			'template' => 'portal-user',
			'name'     => 'user',
			'title'    => 'User',
			'summary'  => 'Portal User',
			'parent'   => '/app/'
		),
		'portal-pricing' => array(
			'template' => 'portal-function',
			'name'     => 'pricing',
			'title'    => 'Pricing',
			'summary'  => 'Pricing',
			'pw_template'  => 'portal-pricing',
			'parent'   => '/app/',
			'apiservice'  => 'createquote'
		)
	);

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public function init() {
		$this->addHook("Pages::logoutURL", function($event) {
			$pages  = $event->object;
			$event->return = $pages->get('template=login')->url."?logout=y";
		});
	}

	/**
	 * ProcessWire Module Info
	 *
	 * @return void
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Dpluso Pages Modules',
			'version' => 101,
			'summary' => 'Installs and creates Dpluso Pages',
			'singular' => true,
			'autoload' => true,
			'requires' => array('PwPages'),
			'installs' => array(
			),
		);
	}

	/**
	 * ProcessWire Installer Function
	 * NOTE: Runs when installed through ProcessWire
	 * @return void
	 */
	public function ___install() {

	}

	/**
	 * ProcessWire removal Function
	 * NOTE: Runs when removed through ProcessWire
	 * @return void
	 */
	public function ___uninstall() {

	}

	public function update() {
		$info = self::getModuleInfo();
		$modules = $this->wire('modules');
		$modules->refresh();

		foreach ($info['installs'] as $module_name) {
			$modules->install($module_name);
		}

		parent::update();
	}
}
