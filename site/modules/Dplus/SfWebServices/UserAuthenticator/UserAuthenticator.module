<?php namespace ProcessWire;

/**
 * class SfWebServicesUserAdmin
 *
 * Handles User Administration
 */
class UserAuthenticator extends WireData implements Module {
	const FIELD_USERNAME = 'IDCLogin';
	const FIELD_PASSWORD = 'IDCPassword';
	const FIELD_CUSTOMER = 'customerNumber';

	const ENDPOINTS_WITHOUT_CUSTOMERNUMBER = array(
		'createorderend'
	);

	const ENDPOINTS_PORTAL = array(
		'createquote'
	);

	public function __construct() {
		$this->authenticated = false;
		$this->username      = '';
		$this->message       = '';
		$this->error         = false;
		$this->endpoint      = '';
	}

	public function get_user($username) {
		return $this->wire('users')->get("name=$username");
	}

	public function user_exists($username) {
		return boolval($this->wire('users')->find("name=$username")->count());
	}

	/**
	 * Authenticates User Input
	 * @param  WireInput $input [description]
	 * @return bool
	 */
	public function authenticate_input(WireInput $input) {
		$rm = strtolower($input->requestMethod());
		$values = $input->$rm;

		if (empty($values->text(self::FIELD_USERNAME)) || empty($values->text(self::FIELD_USERNAME))) {
			$this->authenticated = false;
			$this->error         = true;
		} else {
			$this->username = $values->text(self::FIELD_USERNAME);
			$this->authenticated = $this->authenticate_user($values->text(self::FIELD_USERNAME), $values->text(self::FIELD_PASSWORD));
		}

		if (!$this->authenticated) {
			$this->message = 'Customer is not authorized';
		}
		$this->error = !$this->authenticated;
		return $this->authenticated;
	}

	/**
	 * Return if User was able to log in OR is loggedin
	 * @param  string $username ProcessWire User Name
	 * @param  string $password Password
	 * @return bool
	 */
	public function authenticate_user($username, $password) {
		if ($this->user_exists($username)) {
			$user = $this->get_user($username);

			if ($user->hasRole(SfWebServicesUserAdmin::ROLE_APIAUTHORIZED)) {
				if ($this->wire('session')->login($username, $password)) {
					return true;
				}
			}
		}
		return false;
	}

	/**
	 * Return if User is allowed to use Customer Number
	 * @param  string $username       User Name
	 * @param  string $customerNumber Customer ID
	 * @return bool
	 */
	public function authenticate_user_customer($username, $customerNumber) {
		if ($this->user_exists($username)) {
			$user = $this->get_user($username);
			$custID = strlen($customerNumber) > 6 ? substr($customerNumber, 0, 6) : $customerNumber;

			if ($user->customerNumber == $custID) {
				return true;
			}
		}
		return false;
	}

/* =============================================================
	ProcessWire Module Functions
============================================================= */
	public static function getModuleInfo() {
		return array(
			'title' => 'Sf Webservices User Authenticator',
			'version' => 101,
			'summary' => 'Handles User Authentication',
			'singular' => true,
			'autoload' => true,
			'installs' => array(
				'UserAuthenticatorApi',
				'UserAuthenticatorPortal'
			)
		);
	}
}
